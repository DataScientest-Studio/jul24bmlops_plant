# Use an official Python 3.11 slim image as a base
FROM python:3.11-slim AS builder

# Set environment variables
ENV POETRY_VERSION=1.5.1 \
    POETRY_HOME="/opt/poetry" \
    POETRY_VIRTUALENVS_CREATE=false \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN curl -sSL https://install.python-poetry.org | python3 -

# Add Poetry to PATH
ENV PATH="$POETRY_HOME/bin:$PATH"

# Set working directory
WORKDIR /app

# Copy the pyproject.toml and poetry.lock files to install dependencies
COPY pyproject.toml poetry.lock ./

# Install only runtime dependencies in this stage
RUN poetry install --no-dev --no-root --no-interaction --no-ansi

# Copy the application source code
COPY src/ ./src/
COPY test/ ./test/

# Build the package using Poetry
RUN poetry build

# Install the built package
# RUN pip install dist/*.whl
# Install the built package into a virtual environment
RUN pip install --target=/app/venv dist/*.whl

# Stage 2: Runtime stage
FROM python:3.11-slim AS runtime

# Set environment variables for the runtime stage
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PATH="/app/venv/bin:$PATH"

# Set the working directory in the runtime stage
WORKDIR /app

# Copy the installed dependencies and application code from the builder stage
COPY --from=builder /app/venv /app/venv
COPY --from=builder /app/src /app

# Expose port (if needed, for example, if you're running a web server)
EXPOSE 5000

# Command to run the application
CMD ["python", "mlflow_train.py"]
